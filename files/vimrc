"""""""""""""""""""""""""""" Vim Cscope quick guide """""""""""""""""""""""""""
" Integrated Cscope tutorial see,
"    https://cscope.sourceforge.net/cscope_vim_tutorial.html
"
" At top of directory build cscope database with 'cscope -Rb'
" Three lead control options ...
"  <ctrl-\> command ... will run command in the same window
"  <ctrl-space> command ... will run command in a split horizontal window
"  <ctrl-space-space> command ... will run command in a split vertical window
" Commands (all apply to text under cursor),
"  s : find all uses of symbol X
"  g : find global definitions(s) of symbol
"  c : find all calls to a function
"  f : opens the filename
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader ="-"

call plug#begin('~/.vim/plugged')
    Plug '~/.vim/plugged/vim-commentary'           " press gcc to auto comment a line
    Plug '~/.vim/plugged/vim-repeat'               " makes . work better with plugins
    Plug '~/.vim/plugged/vim-surround'             " surrounds text in (), [], quotes, etc.
    Plug '~/.vim/plugged/vim-airline'        " status bar
    Plug '~/.vim/plugged/vim-signature'          " show mark ids left of line number
    Plug '~/.vim/plugged/gruvbox'                " colorscheme
    Plug '~/.vim/plugged/vim-xdc-syntax'  " xdc syntax
    Plug '~/.vim/plugged/verilog_systemverilog.vim' " system verilog
    Plug '~/.vim/plugged/vim-tex-fold'      " fork from matze/vim-tex-fold add chapter, sub&subsub section support
    Plug '~/.vim/plugged/vim-latex-live-preview'  " requires Okular and/or pdflatex, <leader>llp to open pdf preview
call plug#end()

" Some basics:
    set nocompatible
    filetype plugin on
    syntax on
    set encoding=utf-8
    set number
    set hlsearch
    set incsearch
    set ignorecase " case insensitivity when searching
    set smartcase  " re enables case sensitivity when pattern has upper case
    set cursorline
    set relativenumber
    set expandtab
    set shiftwidth=4
    set tabstop=4
    set autoindent
    set autochdir
    set wildmode=longest,list,full
    set wildmenu
    let g:netrw_banner=0

" place swap files and others in a common directory
    set backupdir=~/.vim/backup//
    set directory=~/.vim/swap//
    set undodir=~/.vim/undo//

" Instead of noesckeys use this so arrows can still be used in insert mode
    set timeout " timeout on partial command like: <leader>, g, etc.
    set tm=1000 " timeoutlen is 1 second
    set ttimeout " have separate value for timeout re: leaving insert mode
    set ttimeoutlen=0 " insert / visual timeout immediately

" Theme
    set background=dark
    let g:gruvbox_contrast_dark = 'hard'
    colorscheme gruvbox

" remap ESC to jk because my pinky is fucked
    inoremap jk <ESC>

" Splits open at the bottom and right, instead of the stupid default
    set splitbelow
    set splitright

" F2 toggle to paste mode (assumes relativenumber IS set)
    noremap <F2> :set invrelativenumber<CR>
    nnoremap <F3> :set invnumber<CR>:set invrelativenumber<CR>:set invpaste<CR>

" keep search results at the center of the screen
    nnoremap n nzz
    nnoremap N Nzz

" Tab shortcuts
    map <leader>te :tabedit<cr>
    map <leader>tn :tabnext<cr>
    map <leader>tx :tabclose<cr>

" Press <leader>Enter to remove search highlights
    noremap <silent> <leader><cr> :noh<cr>

" Press <leader>r to resource ~/.vimrc
    noremap <leader>r :source ~/.vimrc<cr>

" set comment string for idd files to work with vim-commentary
    autocmd FileType idd setlocal commentstring=#\ %s

" set comment string for vhdl files to work with vim-commentary
    autocmd FileType vhdl setlocal commentstring=--\ %s

" set comment string for conf files
    autocmd FileType conf setlocal commentstring=#\ %s

" set comment string for conf files
    autocmd FileType defconfig setlocal commentstring=#\ %s

" set comment string for xdc files
    autocmd FileType xdc setlocal commentstring=#\ %s

" Interpret _defconfig,config files as conf
    autocmd BufNewFile,BufRead *_defconfig,*.defconfig,*.config set syntax=conf

" Interpret ITS files as device tree
    autocmd BufNewFile,BufRead *.its set syntax=dts

" interpret markdown files
    autocmd BufNewFile,BufRead *.md set filetype=markdown

" .tex files automatically detected
    autocmd BufRead,BufNewFile *.tex set filetype=tex
    let g:tex_flavor='latex'
    let g:Tex_DefaultTargetFormat='pdf'
    au! BufRead,BufNewFile *.cls setfiletype tex
    au! BufRead,BufNewFile *.lco setfiletype tex
" open pdf preview of latex (latex preview)
    noremap <leader>llp :LLPStartPreview<cr>

" .bash* files automatically detected
    autocmd BufRead,BufNewFile *.bash* set filetype=sh
    autocmd BufRead,BufNewFile *.d set filetype=sh

" autodetect xilinx constraints (.xdc)
    autocmd BufNewFile,BufRead *.xdc setfiletype xdc

" Readmes autowrap text
    " autocmd BufRead,BufNewFile README.* set tw=79

" Spell-check (underline misspelled words in md,rst files)
    hi clear SpellBad
    hi SpellBad cterm=underline
    set spelllang=en_us
    set spellfile=$HOME/.spellen.utf-8.add
    autocmd BufRead,BufNewFile *.md setlocal spell
    autocmd BufRead,BufNewFile *.rst setlocal spell
    autocmd BufRead,BufNewFile *.tex setlocal spell
    " next misspelled word
    map <leader>sn ]s
    " previous misspelled word
    map <leader>sp [s
    " accept spelling as good word and update dictionary
    map <leader>sa zg
    " suggest alternate spellings
    map <leader>s? z=
    " when in inset mode ctrl+l to go back and auto-accept spelling suggestions
    inoremap <c-l> <c-g>u<esc>[s1z=`]a<c-g>u

" resize current buffer by +/- 5
    noremap <C-left> :vertical resize +5<cr>
    noremap <C-down> :resize -5<cr>
    noremap <C-up> :resize +5<cr>
    noremap <C-right> :vertical resize -5<cr>

" Set diff mode to ignore whitespace
    if &diff
        set diffopt+=iwhite
    endif

" Automatically retab on save
    autocmd BufWritePre * retab

" Automatically deletes all trailing whitespace on save
    autocmd BufWritePre * %s/\s\+$//e

" Automatically run clang-format when using gg=G
    " autocmd FileType c,cpp setlocal equalprg=clang-format

" Disables automatic commenting on newline
    " autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Use word wrapping in vimdiff
    autocmd FilterWritePre * if &diff | setlocal wrap< | endif

" Allows to see diff in current file before saving with :diffSaved
    function! s:DiffWithSaved()
        let filetype=&ft
        diffthis
        vnew | r # | normal! 1Gdd
        diffthis
        exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
    endfunction
    com! DiffSaved call s:DiffWithSaved()

" Allows to see diff between current file and svn
    function! s:DiffWithSVNCheckedOut()
      let filetype=&ft
      diffthis
      vnew | exe "%!svn cat " . fnameescape( expand("#:p") )
      diffthis
      exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
      wincmd R
    endfunction
    com! SvnDiff call s:DiffWithSVNCheckedOut()

" Allows to see diff between current file and git
    function! s:DiffWithGITCheckedOut()
      let filetype=&ft
      diffthis
      vnew | exe "%!git diff " . fnameescape( expand("#:p") ) . " | patch -p 1 -Rs -o -"
      exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
      diffthis
      wincmd R
    endfunction
    com! GitDiff call s:DiffWithGITCheckedOut()
