let mapleader ="-"

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'morhetz/gruvbox'
Plug 'junegunn/fzf'
Plug 'amal-khailtash/vim-xdc-syntax'
Plug 'gutelfuldead/vim-tex-fold' " fork from matze/vim-tex-fold add chapter, sub&subsub section support
Plug 'xuhdev/vim-latex-live-preview' " requires Okular and/or pdflatex, <leader>llp to open pdf preview
call plug#end()

" Some basics:
    set nocompatible
    filetype plugin on
    syntax on
    set encoding=utf-8
    set number
    set hlsearch
    set incsearch
    set ignorecase " case insensitivity when searching
    set smartcase  " re enables case sensitivity when pattern has upper case
    set cursorline
    set noesckeys
    set expandtab
    set shiftwidth=4
    set tabstop=4
    set autoindent
    set pastetoggle=<F3> " F3 toggles paste/nopaste vim paste is trash
    set autochdir
    set wildmode=longest,list,full
    set wildmenu
    let g:netrw_banner=0

" Theme
    set background=dark
    let g:gruvbox_contrast_dark = 'hard'
    colorscheme gruvbox

" remap ESC to jk because my pinky is fucked
    inoremap jk <ESC>

" use F2 to toggle line numbers on/off for easy copy pasting to system
" clipboard with the mouse
    noremap <F2> :set invnumber<CR>

" keep search results at the center of the screen
    nnoremap n nzz
    nnoremap N Nzz

" Press <leader>Enter to remove search highlights
    noremap <silent> <leader><cr> :noh<cr>

" Press <leader>r to resource ~/.vimrc
    noremap <leader>r :source ~/.vimrc<cr>

" set comment string for idd files to work with vim-commentary
    autocmd FileType idd setlocal commentstring=#\ %s

" set comment string for vhdl files to work with vim-commentary
    autocmd FileType vhdl setlocal commentstring=--\ %s

" set comment string for conf files
    autocmd FileType conf setlocal commentstring=#\ %s

" set comment string for conf files
    autocmd FileType defconfig setlocal commentstring=#\ %s

" set comment string for xdc files
    autocmd FileType xdc setlocal commentstring=#\ %s

" Interpret _defconfig,config files as conf
    autocmd BufNewFile,BufRead *_defconfig,*.defconfig,*.config set syntax=conf

" Interpret ITS files as device tree
    autocmd BufNewFile,BufRead *.its set syntax=dts

" Splits open at the bottom and right, instead of the stupid default
    set splitbelow
    set splitright

" .tex files automatically detected
    autocmd BufRead,BufNewFile *.tex set filetype=tex
    let g:tex_flavor='latex'
    let g:Tex_DefaultTargetFormat='pdf'
    au! BufRead,BufNewFile *.cls setfiletype tex
    au! BufRead,BufNewFile *.lco setfiletype tex
" open pdf preview of latex (latex preview)
    noremap <leader>llp :LLPStartPreview<cr>

" .bash* files automatically detected
    autocmd BufRead,BufNewFile *.bash* set filetype=sh
    autocmd BufRead,BufNewFile *.d set filetype=sh

" autodetect xilinx constraints (.xdc)
    autocmd BufNewFile,BufRead *.xdc setfiletype xdc

" Readmes autowrap text
    autocmd BufRead,BufNewFile README.* set tw=79

" Spell-check (underline misspelled words in md,rst files)
    hi clear SpellBad
    hi SpellBad cterm=underline
    set spellfile=$HOME/.spellen.utf-8.add
    autocmd BufRead,BufNewFile *.md setlocal spell
    autocmd BufRead,BufNewFile *.rst setlocal spell
    autocmd BufRead,BufNewFile *.tex setlocal spell
    map <leader>sn ]s
    map <leader>sp [s
    map <leader>sa zg
    map <leader>s? z=

" resize current buffer by +/- 5
    noremap <C-left> :vertical resize +5<cr>
    noremap <C-down> :resize -5<cr>
    noremap <C-up> :resize +5<cr>
    noremap <C-right> :vertical resize -5<cr>

" Set diff mode to ignore whitespace
    if &diff
        set diffopt+=iwhite
    endif

" Automatically retab on save
    autocmd BufWritePre * retab

" Automatically deletes all trailing whitespace on save
    " autocmd BufWritePre * %s/\s\+$//e

" Automatically run clang-format when using gg=G
    " autocmd FileType c,cpp setlocal equalprg=clang-format

" Disables automatic commenting on newline
    " autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Allows to see diff in current file before saving with :diffSaved
function! s:DiffWithSaved()
    let filetype=&ft
    diffthis
    vnew | r # | normal! 1Gdd
    diffthis
    exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()
